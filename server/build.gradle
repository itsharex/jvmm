plugins {
    id 'java'
    id 'application'
}
ext.projectName = 'jvmm-server'
archivesBaseName = "jvmm-server"

group = rootProject.group
version = rootProject.version

dependencies {
    implementation project(path: ':logger')
    compile(project(':core'))
    compile(project(':convey'))
    compile "org.yaml:snakeyaml:${snakeyamlVersion}"
}

task cleanJar(type: Delete) {
    delete 'src/main/resources/jvmm-logger.jar'
}

tasks.clean.configure {
    dependsOn cleanJar
}

tasks.compileJava.configure {
    dependsOn project(':logger').tasks.jar

    doLast {

        delete 'src/main/resources/jvmm-logger.jar'

        //  发布时去掉
        if (env != 'publish' && env != 'install') {
            println("copy logger jar file to resources")
            copy {
                from '../logger/build/libs/jvmm-logger.jar'
                into 'src/main/resources'
            }
        }
    }
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'

    archiveName("${projectName}.jar")

    manifest {
        attributes 'Main-Class': 'org.beifengtz.jvmm.server.ServerApplication'
    }

    //  发布时去掉
    if (env != 'publish' && env != 'install') {
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    doLast {
        def targetDir = "${rootProject.rootDir}/bin/jvmm-${rootProject.version}"

        copy {
            println("copy config.yml to ${targetDir}")

            from "${project.buildDir}/resources/main/config.yml"
            into targetDir
        }
    }
}

javadoc {
    options.addStringOption("charset", "UTF-8")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveName("${projectName}-sources.jar")
    getArchiveClassifier().set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    getArchiveClassifier().set('javadoc')
}

tasks.jar.configure {
    dependsOn sourcesJar
}

artifacts {
    archives sourcesJar, javadocJar
}

if(env == 'publish') {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name projectName
                    packaging 'jar'
                    description 'Provides access to operating system, process, thread and other information during Java runtime.'
                    url 'https://github.com/tzfun/jvmm'

                    scm {
                        url = 'https://github.com/tzfun/jvmm'
                        connection = 'scm:git:git://github.com/tzfun/jvmm.git'
                        developerConnection = 'scm:git:ssh://git@github.com/tzfun/jvmm.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'beifengtz'
                            email 'beifengtz@163.com'
                        }
                    }
                }
            }
        }
    }

    signing {
        sign configurations.archives
    }
}
